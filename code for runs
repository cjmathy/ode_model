#----------PARAMETER SWEEP----------

#GAP ONLY

# #Define parameters to sweep
# GEF_concentrations = [0.000,0.005,0.010,0.015,0.020,0.025]
# legend = []

# species_backup = species.copy()

# fig = plt.figure()
# ax = fig.add_subplot(111)

# for conc0 in GEF_concentrations:
# 	species['GEF'].conc0 = conc0
# 	concentrations, t = runmodel(species,parameters,sysargs)
# 	legend.append("GEF = %3f" %conc0)

# 	# plot Ran Species together
# 	ran_tot = species['Ran'].conc0+species['RanGTP'].conc0+species['RanGDP'].conc0
# 	ax.plot(t, concentrations[:,species['RanGTP'].index]/ran_tot,)

# plt.title('RanGTP, varying GEF')
# plt.ylabel('Fraction of Total Species Type')
# plt.xlabel('Time (seconds)')
# # fig.legend(legend,loc='upper center', bbox_to_anchor=(0.5, -0.05))
# plt.xticks(np.arange(0, int(sysargs.t)+1, int(sysargs.t)/2))
# plt.grid(True)
# lgd = ax.legend(legend, loc='upper center', bbox_to_anchor=(1.25 ,0.75))
# plt.grid('on')
# fig.savefig(output + 'GEF_sweep.png', bbox_extra_artists=(lgd,), bbox_inches='tight')

# #GEF ONLY

# #Define parameters to sweep
# GEF_concentrations = [0.000,0.005,0.010,0.015,0.020,0.025]
# legend = []

# species_backup = species.copy()

# fig = plt.figure()
# ax = fig.add_subplot(111)

# for conc0 in GAP_concentrations:
# 	species['GAP'].conc0 = conc0
# 	concentrations, t = runmodel(species,parameters,sysargs)
# 	legend.append("GAP = %3f" %conc0)

# 	# plot Ran Species together
# 	ran_tot = species['Ran'].conc0+species['RanGTP'].conc0+species['RanGDP'].conc0
# 	ax.plot(t, concentrations[:,species['RanGTP'].index]/ran_tot)

# plt.title('Ran species, varying GAP')
# plt.ylabel('Fraction of Total Species Type')
# plt.xlabel('Time (seconds)')
# # fig.legend(legend,loc='upper center', bbox_to_anchor=(0.5, -0.05))
# plt.xticks(np.arange(0, int(sysargs.t)+1, int(sysargs.t)/2))
# plt.grid(True)
# lgd = ax.legend(legend, loc='upper center', bbox_to_anchor=(1.25 ,0.75))
# plt.grid('on')
# fig.savefig(output + 'GAP_sweep.png', bbox_extra_artists=(lgd,), bbox_inches='tight')


# GEF_concentrations = [0.000,0.005,0.010,0.015,0.020,0.025]
# GAP_concentrations = [0.000,0.005,0.010,0.015,0.020,0.025]

# fig = plt.figure(figsize=(15,8))
# for i in GEF_concentrations:
# 	ax = fig.add_subplot(2, 3, GEF_concentrations.index(i)+1)

# 	for j in GAP_concentrations:
# 		species['GEF'].conc0, species['GAP'].conc0 = i,j
# 		concentrations, t = runmodel(species,parameters,args)
# 		ax.plot(t, concentrations[:,species['SensorPi'].index])

# 		plt.title("GEF = %f" %i)
# 		plt.xlabel("Time (seconds)")
# 		plt.ylabel("Sensor Concentration (uM)")
	
# plt.legend(["GAP = %f" %0.000,
# 			"GAP = %f" %0.005,
# 			"GAP = %f" %0.010,
# 			"GAP = %f" %0.015,
# 			"GAP = %f" %0.020,
# 			"GAP = %f" %0.025,
# 			"GAP = %f" %0.030])
# fig.suptitle("Varying GAP and GEF, total time = %s seconds" %args.t,fontsize=16)
# plt.tight_layout()
# fig.subplots_adjust(top=.9)
# fig.savefig(output + 'parameter_sweep.png')



# Sweep through all Km_GAP, Km_GEF, Kcat_GAP, and kcat_GEF values, create a surface in 4D

#Define parameters to sweep
# kcat_GEF_vals = np.linspace(0,50,51)
# kcat_GAP_vals = np.linspace(0,50,51)
# Km_GEF_vals = np.linspace(0,50,51)
# Km_GAP_vals = np.linspace(0,50,51)

# import itertools
# import time

# start_time = time.time()

# for values in itertools.product(range(0,9),range(1,10),range(0,9),range(1,10)):

# 	kcat_GTP = float(values[0])
# 	Km_GEF = float(values[1])
# 	kcat_GAP = float(values[2])
# 	Km_GAP = float(values[3])
# 	print values
# 	parameters['kcat_GTP'].value = kcat_GTP
# 	parameters['Km_GEF'].value = Km_GEF
# 	parameters['kcat_GAP'].value = kcat_GAP
# 	parameters['Km_GAP'].value = Km_GAP
# 	concentrations, t = runmodel(species,parameters,sysargs)
# 	print time.time() - start_time








# legend = []

# species_backup = species.copy()

# fig = plt.figure()
# ax = fig.add_subplot(111)

# for conc0 in GAP_concentrations:
# 	species['GAP'].conc0 = conc0
# 	concentrations, t = runmodel(species,parameters,sysargs)
# 	legend.append("GAP = %3f" %conc0)

# 	# plot Ran Species together
# 	ran_tot = species['Ran'].conc0+species['RanGTP'].conc0+species['RanGDP'].conc0
# 	ax.plot(t, concentrations[:,species['RanGTP'].index]/ran_tot)

# plt.title('Ran species, varying GAP')
# plt.ylabel('Fraction of Total Species Type')
# plt.xlabel('Time (seconds)')
# # fig.legend(legend,loc='upper center', bbox_to_anchor=(0.5, -0.05))
# plt.xticks(np.arange(0, int(sysargs.t)+1, int(sysargs.t)/2))
# plt.grid(True)
# lgd = ax.legend(legend, loc='upper center', bbox_to_anchor=(1.25 ,0.75))
# plt.grid('on')
# fig.savefig(output + 'GAP_sweep.png', bbox_extra_artists=(lgd,), bbox_inches='tight')
